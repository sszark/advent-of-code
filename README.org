#+TITLE: Advent of Code
#+AUTHOR: Sszark
#+STARTUP: showeverything
Advent of Code is an Advent calendar of small programming puzzles for a 
variety of skill sets and skill levels that can be solved in any 
programming language you like. People use them as a speed contest, 
interview prep, company training, university coursework, practice problems, 
or to challenge each other.

* Table of Content
- [[#2020][2020]]
  - [[#day-1-report-repair][Day 1: Report Repair]]
  - [[#day-2-password-philosophy][Day 2: Password Philosophy]]

* 2020
** Day 1: Report Repair
https://adventofcode.com/2020/day/1

#+BEGIN_SRC rust :tangle 2020/day1.rs
use aoc_runner_derive::{aoc, aoc_generator};

const TARGET: i32 = 2020;

fn day1_find_pair(input: &[i32], target: i32) -> Result<(i32, i32), &'static str> {
    for n in input.iter() {
        // Determine twin size
        let candidate = target - n;
        // If the twin resides within the stack. The correct pair has been found.
        if input.contains(&candidate) {
            return Ok((*n, candidate))
        }
    }
    Err("Could not a derive a pair from input. (bug in 'day1_find_pair')")
}

fn day1_find_triple(input: &[i32], target: i32) -> Result<(i32, i32, i32), &'static str> {
    for (i, head) in input.iter().enumerate() {
        // Slice that contains all values apart from the head position
        let headless_input = [&input[..i], &input[i+1..]].concat();
        // Subtract head value from the target to find a matching pair
        if let Ok((a, b)) = day1_find_pair(&headless_input, target-head) {
            return Ok((a, b, *head))
        }
    }
    Err("Could not a derive a triple from input. (bug in 'day1_find_triple')")
}

#[aoc_generator(day1)]
pub fn input_generator(input: &str) -> Vec<i32> {
    let mut x: Vec<i32> = input.lines().map(|x| x.parse().unwrap()).collect();
    x.sort_unstable();
    x
}

#[aoc(day1, part1)]
fn day1_part1(input: &[i32]) -> Result<i32, &'static str> {
    match day1_find_pair(input, TARGET) {
        Ok((a, b)) => Ok(a*b),
        Err(err) => Err(err)
    }
}

fn day1_part2(input: &[i32]) -> Result<i32, &'static str> {
    match day1_find_triple(input, TARGET) {
        Ok((a, b, head)) => Ok(a*b*head),
        Err(err) => Err(err)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn part1() {
        assert_eq!(day1_part1(&[1721, 979, 366, 299, 675, 1456]), Ok(514579));
    }
    #[test]
    fn part2() {
        assert_eq!(day1_part2(&[1721, 979, 366, 299, 675, 1456]), Ok(241861950));
    }
}
#+END_SRC
**** Results
#+BEGIN_SRC
// Tests
running 2 tests
test day1::tests::part1 ... ok
test day1::tests::part2 ... ok

// Benchmark
Day1 - Part1/(default)  time:   [249.60 ns 265.85 ns 282.06 ns]
Day1 - Part2/(default)  time:   [16.515 us 16.849 us 17.220 us]
#+END_SRC

** Day 2: Password Philosophy
https://adventofcode.com/2020/day/2

**** Shared
#+BEGIN_SRC rust :tangle 2020/day2.rs
use aoc_runner_derive::{aoc, aoc_generator};

pub struct Entry {
    low: usize,
    high: usize,
    charr: char,
    pass: String,
}

impl Entry {
    fn is_valid(&self) -> bool {
        let mut counter = 0;
        for c in self.pass.chars() {
            // If the tracked character matches. increment the counter
            if c == self.charr {
                counter += 1
            }
        }
        
        // Returns true if it conforms to the password rule
        counter >= self.low && counter <= self.high
    }

    fn is_valid_new(&self) -> bool {
        let mut counter = 0;

        // Increment the counter if the required char matches the index requirement.
        if self.pass.as_bytes()[self.low - 1] as char == self.charr {
            counter += 1;
        }

        // Increment the counter if the required char matches the index requirement.
        if self.pass.as_bytes()[self.high - 1] as char == self.charr {
            counter += 1;
        }

        // Returns true if it conforms to the password rule
        counter == 1
    }
}

#[aoc_generator(day2)]
pub fn input_generator2(input: &str) -> Vec<Entry> {
    let pruned_input = input.replace("-", " ").replace(":", "");

    let mut entries: Vec<Entry> = vec![];

    let lines: Vec<&str> = pruned_input.lines().collect();
    for entry in lines {
        let x: Vec<&str> = entry.split(' ').collect();
        entries.push(Entry {
            low: x[0].parse().unwrap(),
            high: x[1].parse().unwrap(),
            charr: x[2].parse().unwrap(),
            pass: x[3].into(),
        })
    }
    entries
}

#[aoc(day2, part1)]
fn day2_part1(input: &[Entry]) -> u32 {
    let mut counter = 0;
    for e in input {
        if e.is_valid() {
            counter += 1
        }
    }
    counter
}

#[aoc(day2, part2)]
fn day2_part2(input: &[Entry]) -> u32 {
    let mut counter = 0;
    for e in input {
        if e.is_valid_new() {
            counter += 1
        }
    }
    counter
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn part1() {
        assert_eq!(
            day2_part1(&[
                Entry {
                    low: 1,
                    high: 3,
                    charr: 'a',
                    pass: "abcde".into()
                },
                Entry {
                    low: 1,
                    high: 3,
                    charr: 'b',
                    pass: "cdefg".into()
                },
                Entry {
                    low: 2,
                    high: 9,
                    charr: 'c',
                    pass: "ccccccccc".into()
                }
            ]),
            2
        );
    }
    #[test]
    fn part2() {
        assert_eq!(
            day2_part2(&[
                Entry {
                    low: 1,
                    high: 3,
                    charr: 'a',
                    pass: "abcde".into()
                },
                Entry {
                    low: 1,
                    high: 3,
                    charr: 'b',
                    pass: "cdefg".into()
                },
                Entry {
                    low: 2,
                    high: 9,
                    charr: 'c',
                    pass: "ccccccccc".into()
                }
            ]),
            1
        );
    }
}
#+END_SRC
**** Results
#+BEGIN_SRC
// Tests
running 2 tests
test day2::tests::part2 ... ok
test day2::tests::part1 ... ok

// Benchmark
Day2 - Part1/(default)  time:   [12.393 us 12.437 us 12.492 us]
Day2 - Part2/(default)  time:   [1.5879 us 1.5927 us 1.5983 us]
#+END_SRC
